c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      udiff =0.0d0
      utrans=0.0d0
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ffx = 0.0d0
      ffy = 0.0d0
      ffz = 0.0d0
      
      if (jp == 0) call makebf_str_pulse(ffx,ffy,ffz,ix,iy,iz,ieg)
      
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      qvol = 0.0d0
      source = 0.0d0
      end
c-----------------------------------------------------------------------
      subroutine userchk
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'HELIXD'
      
      call hpts
      call save_ubar

      end
c----------------------------------------------------------------------------------
      subroutine userbc(i,j,k,iside,eg)
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'HELIXD'
      integer i,j,k,iside,eg
      if (JP.eq.0) then ! velocity
            ux = 1.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         else           ! perturbation
            ux = 0.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         endif
      end
c-----------------------------------------------------------------------
      subroutine useric(i,j,k,eg)
      implicit none 
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer i,j,k,eg
        if (JP.eq.0) then ! velocity
            ux = 1.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         else             ! perturbation
            ux = 0.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         endif
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      implicit none
      include 'SIZE'
      include 'TOTAL'
      call setbc(1,1,'W  ')
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'HELIXD'
      integer, parameter :: ntot = lx1*ly1*lz1*lelv
      integer :: i, ix, iy, iz, ie
      real :: pp, p, delta, rr, alph
      real :: angle_t(lx1,ly1,lz1,lelv)
      real :: alpha(lx1,ly1,lz1,lelv)
      if (istep.eq.0) then
            omega = (womersley**2)*cpfld(1,1)      ! pulsation frequency
            pulse_T = 2.0d0*pi/omega               ! pulsation period
            an_phi = atan2(pitch_s,curv_radius)
            sweep = length*cos(an_phi)/curv_radius ! sweep angle in radians
      endif
      call helix_pipe
      if (nid.eq.0) write(6,*) 'USERDAT2: phi = ', an_phi*180.0d0/3.140d0
      if (nid.eq.0) write(6,*) 'USERDAT2: curv_radius = ', curv_radius
      
      call outpost(ox, oy, vz, pr, t, 'oxy')
      call outpost(xax,yax, zax, pr, t, 'gax')
      
      call rzero(alpha, ntot)
      do ie = 1, lelv
         do iz = 1, lz1
         do iy = 1, ly1
         do ix = 1, lx1
         ! Compute angle_t and pp once
         pp = xax(ix,iy,iz,ie)**2 + yax(ix,iy,iz,ie)**2
         angle_t(ix,iy,iz,ie) = atan2(xax(ix,iy,iz,ie), yax(ix,iy,iz,ie))

         ! Compute p and related values
         p = sqrt(pp) - curv_radius
         alpha(ix,iy,iz,ie) = atan2(p, zax(ix, iy, iz, ie))
         ox(ix,iy,iz,ie) = atan2(zax(ix, iy, iz, ie), p)
      end do
      end do
      end do
      end do
      call outpost(angle_t,alpha,ox,pr,t,'agl')
      
      pi = 4.0d0*atan(1.0d0)
      do ie = 1, lelv
            do iz = 1, lz1
            do iy = 1, ly1
            do ix = 1, lx1
      !angle_t  = atan2(xax(ix,iy,iz,ie),yax(ix,iy,iz,ie))  ! measured clockwise from 12 noon
      pp=xax(ix,iy,iz,ie)**2 + yax(ix,iy,iz,ie)**2
      p   = sqrt(pp)-curv_radius
      alph = atan2(p,zax(ix,iy,iz,ie))
      rr = p**2 + zax(ix,iy,iz,ie)**2
      delta = curv_radius/(curv_radius**2+pitch_s**2)
      !tau = pitch_s/(curv_radius**2+pitch_s**2)
      vx(ix,iy,iz,ie) = 1.0d0/abs(1+delta*sqrt(rr)*sin(alph))
      end do
      end do
      end do
      end do
      call outpost(vx,vx,vx,pr,t,'fsh')
      call nek_end()
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      end
c-----------------------------------------------------------------------
