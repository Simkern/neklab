c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      udiff =0.0d0
      utrans=0.0d0
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,ieg)
      use neklab
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ffx = 0.0d0
      ffy = 0.0d0
      ffz = 0.0d0
      
      if (jp == 0) call neklab_forcing(ffx,ffy,ffz,ix,iy,iz,ieg,jp)
      
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      qvol = 0.0d0
      source = 0.0d0
      end
c-----------------------------------------------------------------------
      subroutine userchk
      use neklab
      use neklab_helix
      use LightKrylov_Logger
      implicit none     
      include "SIZE"
      include "TOTAL"
      
      ! System for which we seek a fixed point
      type(nek_system_torus), allocatable :: sys
      ! State vectors
      type(nek_dvector) :: bf
      ! Tolerance for the Newton solver
      real(dp) :: tol, ubar, norm, period
      ! flow parameters
      !real, parameter :: womersley   = 35.0d0
      ! corresponds to Q = 1%
      !real, parameter :: dp0ds       = 7.946035446259826e-02
      !real, parameter :: dp1dsr      = 6.088015703926612e-04
      !real, parameter :: dp1dsi      = 1.210241163576931e-02
      real, parameter :: womersley   = 100.0d0
      ! corresponds to Q = 20%
      real, parameter :: dp0ds       = 7.948934241227328e-02
      real, parameter :: dp1dsr      = 2.842725203120692e-02
      real, parameter :: dp1dsi      = 1.942304584125990e+00
      real(dp), dimension(3), parameter :: dpds = [ dp0ds, sqrt(dp1dsr**2 + dp1dsi**2), 0.0_dp ]
      integer :: i, j, outpost_step, tol_mode
		character(len=128) :: msg


      if (istep == 0) then
         call pipe%setup_summary()
         ! Set flow parameters
         call pipe%init_flow(dpds, womersley)
         call load_fld('rsttorus0.f00001')
         call nek2vec(bf, vx, vy, vz, pr, t)

         ! parameters
         tol = 1e-6_dp
         tol_mode = 2
			period = pipe%get_period()
         !df = 100*tol
         
         ! define system
         sys = nek_system_torus()
         sys%jacobian = nek_jacobian_torus()
         sys%jacobian%X = bf
	   	ubar = pipe%compute_ubar(bf%vx, bf%vy, bf%vz)
         write(msg,'(A,E15.8)') 'u_bar_old= ', ubar
         call logger%log_message(msg, procedure='userchk')

         call setup_nonlinear_solver(recompute_dt=.true.,cfl_limit=0.4_dp,endtime=period)
      ! Intgrate the nonlinear equations forward
         time = 0.0_dp
         call pipe%reset_newton()               ! reset output counter to overwrite output files
         do istep = 1, nsteps
            call pipe%compute_bf_forcing(time)  ! --> set neklab_forcing data
            call pipe%save_2d_fields(vx,vy,vz)
            call nek_advance()
				if (mod(istep,20)==0) call outpost(vx,vy,vz,pr,t,'bs1')
         end do
         call pipe%outpost_2d()                 ! output even if buffer is not full
			
         call setup_linear_solver(solve_baseflow=.false.,recompute_dt = .false.)
			! Integrate the equations forward in time.
         time = 0.0_dp
         call pipe%reset_newton()         		! reset output counter to load output files in order
         do istep = 1, nsteps
            call pipe%set_baseflow(vx, vy, vz, istep)
            call nek_advance()
				if (mod(istep,20)==0) call outpost(vx,vy,vz,pr,t,'bs2')				
         end do
			call nek_end()
      end if

      return

      end
c----------------------------------------------------------------------------------
      subroutine userbc(i,j,k,iside,eg)
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer i,j,k,iside,eg
      if (JP.eq.0) then ! velocity
            ux = 1.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         else           ! perturbation
            ux = 0.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         endif
      end
c-----------------------------------------------------------------------
      subroutine useric(i,j,k,eg)
      implicit none 
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer i,j,k,eg
        if (JP.eq.0) then ! velocity
            ux = 1.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         else             ! perturbation
            ux = 0.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         endif
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      implicit none
      include 'SIZE'
      include 'TOTAL'
      call setbc(1,1,'W  ')
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
		use LightKrylov_Logger
      use neklab_helix
      implicit none
      include 'SIZE'
      include 'TOTAL'
      ! geometry parameters
      real, parameter :: delta       = 0.3d0
      real, parameter :: diameter    = 2.0d0
      real, parameter :: pitch_s     = 0.0d0
      real, parameter :: length      = 1.0d0
      ! mesh parameters
      integer, parameter :: nslices  = 5
      integer, parameter :: nelf     = 108
      if (istep.eq.0) then
            ! Setup logger
            call logger_setup(nio=0, log_level=40, log_stdout=.false., log_timestamp=.true.)
            ! Initialize type, set geometry and compute forcing distribution
            call helix_pipe(delta, diameter, pitch_s, length, nslices, nelf)
      endif
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      end
c-----------------------------------------------------------------------
