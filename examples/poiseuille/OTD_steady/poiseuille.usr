c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)

      implicit none

      include 'SIZE'
      include 'NEKUSE'          ! UDIFF, UTRANS

      integer ix,iy,iz,ieg

      UDIFF =0.
      UTRANS=0.

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)

      use neklab, only: neklab_forcing
      implicit none
      include 'SIZE'
      include 'SOLN'            ! jp
      include 'NEKUSE'          ! FFX, FFY, FFZ
      include 'PARALLEL'        ! GLLEL
      integer ix,iy,iz,ieg


!----------------------------------------------------------------------
!     Build the forcing for the perturbation evolution equation
!
!     du_i/dt = L_{NS} (u_i) - < u_j , L_{NS}(u_i) > u_j
!
! =>  du_i/dt = L_{NS} (u_i) - Lr_{ij}*u_j
!     \____________________/ \___________/
!                  |               |
! reg. pert. eq. __|               |______ user defined forcing FFi
!
      FFX = 0.0 
      FFY = 0.0 
      FFZ = 0.0 
     
      call neklab_forcing(FFX,FFY,FFZ,ix,iy,iz,ieg,jp)

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)

      implicit none

      include 'SIZE'
      include 'NEKUSE'          ! QVOL

      integer ix,iy,iz,ieg

      QVOL   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,eg)

      implicit none

      include 'SIZE'
      include 'NEKUSE'          ! UX, UY, UZ, TEMP, X, Y
      include 'SOLN'            ! jp

      integer ix,iy,iz,iside,eg

      if (jp.eq.0) then
c     baseflow
        if (cbu.eq.'v  ') then
          UX = 0.0
          UY = 0.0
          UZ = 0.0
        endif
      else
c     perturbations
        UX = 0.0
        UY = 0.0
        UZ = 0.0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)

      implicit none

      include 'SIZE'
      include 'INPUT'
      include 'NEKUSE'          ! UX, UY, UZ, TEMP, Z
      include 'SOLN'            ! JP
      include 'PARALLEL'        ! gllel

      integer ix,iy,iz,ieg
      integer ie, ijke

      real amp, pi, kx(lpert), ky(lpert) 

      real mth_rand
      real xl(LDIM)
      real fcoeff(3)

      ie = gllel(ieg)

      pi = 4.0*atan(1.0)

c     velocity
c     base flow
      if (jp.eq.0) then
        UX = (1.0-Y**2)
        UY = 0.0
        UZ = 0.0
      else
c     perturbation
        ijke = ix + lx1*((iy-1) + ly1*((iz-1) + lz1*(ie-1)))
        UX   = 0.0
        UY   = 0.0
        UZ   = 0.0
        temp = 0.0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk

      use neklab
      implicit none
      include "SIZE"
      include "TOTAL"

      ! OTD
      type(nek_otd) :: OTD
      ! OTD opts
      type(otd_opts) :: opts
      ! State vectors
      type(nek_dvector) :: bf
      
      if (istep.eq.0) then
         call nek2vec(bf, vx, vy, vz, pr, t)

         ! define OTD structure
         OTD = nek_otd()
         allocate(OTD%baseflow); call OTD%baseflow%zero()
         OTD%baseflow = bf

         opts = otd_opts(solve_baseflow = .false.,
     $                   startstep = 1,
     $                   printstep = 5, 
     $                   orthostep = 10, 
     $                   iostep    = 500,
     $                   iorststep = 500, 
     $                   n_usrIC   = 2)

         call OTD_analysis(OTD, opts)

         call nek_end()
      end if
      return
      end

c-----------------------------------------------------------------------
c     This routine to modify element vertices
      subroutine usrdat

      implicit none

      include 'SIZE'
      include 'TOTAL'

      real glmin,glmax
           
      real fact,x_min,x_max,y_max,y_min,z_min,z_max
      integer n

      n = 8*nelv
      
      fact = 4.*atan(1.)
      call cmult(xc,fact,n)
      if (if3d) then    
        call cmult(zc,fact,n)
      endif     

      x_min=glmin(xc,n)
      y_min=glmin(yc,n)
      x_max=glmax(xc,n)
      y_max=glmax(yc,n)
      if (if3d) then
        z_min=glmin(zc,n)
        z_max=glmax(zc,n)
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      implicit none
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      implicit none

      return
      end
