c Kovasznay flow, an analytical two-dimensional steady solution  to the
c incompressible Navier-Stokes equations.  
c
c-----------------------------------------------------------------------
c
c  User specified routines 
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
c
      common /cprint/ ifprint
      logical         ifprint
      common /ctmp1e/ uxe (lx1,ly1,lz1,lelv), uye (lx1,ly1,lz1,lelv)
      common /scruz/  erru(lx1,ly1,lz1,lelv), errv(lx1,ly1,lz1,lelv)
     $               ,errw(lx1,ly1,lz1,lelv)
c
      integer icalld
      save    icalld
      data    icalld /0/

      real, dimension(lx1*ly1*lz1*lelv,1) :: dudx, dudy, dvdx, dvdy
      real, dimension(lx1*ly1*lz1*lelv,1) :: cx, cy

      real xp(ldim,10), xb, yb

      ntot=nx1*ny1*nz1*nelv

      a1=1.0
      if (icalld.eq.0) then
         icalld=1
c
         vis=  param(2)
         if (vis.lt.0) vis = 1./abs(vis)
         one  =1.0
         twopi=8.0*atan(one)
         reyn=1.0/vis
         ccc = 0.25*reyn**2 + twopi*twopi
         rlam=reyn/2.0 - sqrt( ccc )
c
c        Compute the exact solution
c
         do 100 i=1,ntot
            x=xm1(i,1,1,1)
            y=ym1(i,1,1,1)
            uxe(i,1,1,1) =  1.0  - exp(rlam*x)*cos(twopi*y)
            uye(i,1,1,1) =  rlam * exp(rlam*x)*sin(twopi*y)/twopi
            errw(i,1,1,1) = 0.0
  100    continue
  101    format(3g14.7)
      endif
c     if (ifprint) then
c
c       Compute the error
c
        errmu=vx(1,1,1,1)-uxe(1,1,1,1)
        errmv=vy(1,1,1,1)-uye(1,1,1,1)
        do 200 i=1,ntot
           erru(i,1,1,1)=vx(i,1,1,1)-uxe(i,1,1,1)
           errv(i,1,1,1)=vy(i,1,1,1)-uye(i,1,1,1)
           if(erru(i,1,1,1).gt.errmu) then
              errmu=erru(i,1,1,1)
              iemu=i
           endif
           if(errv(i,1,1,1).gt.errmv) then
              errmv=errv(i,1,1,1)
              iemv=i
           endif
  200   continue
        errmu=glamax(erru,ntot)
        errmv=glamax(errv,ntot)
c
        ifield=1
        call normvc (h1,semi,hl2,hlinf,erru,errv,errw)
        call normvc (h1E,semiE,hl2E,hlinfE,uxe,uye,errw)
        hl2_wt = hl2/hl2e
c
        npoly = lx1-1
        if (nid.eq.0) write(6,301) istep,npoly,h1,semi,hl2,hlinf,time
  301   format(i6,i3,1p5e13.5,' err')
c     endif

      if (lastep .eq. 1) then
      	call outpost(vx,vy,vz,pr,t,'   ')
	      do i = 1, ntot
            xb = xm1(i,1,1,1) + 0.5d0
            yb = ym1(i,1,1,1) + 0.5d0
            vxp(i,1) = sin(twopi/3.*xb)*sin(twopi/4.*yb)
            vyp(i,1) = sin(2.*twopi/3.*xb)*sin(2*twopi/4.*yb)
            dudx(i,1) =    twopi/3.*cos(   twopi/3.*xb)*sin(   twopi/4.*yb)
            dudy(i,1) =    twopi/4.*sin(   twopi/3.*xb)*cos(   twopi/4.*yb)
            dvdx(i,1) = 2.*twopi/3.*cos(2.*twopi/3.*xb)*sin(2.*twopi/4.*yb)
            dvdy(i,1) = 2.*twopi/4.*sin(2.*twopi/3.*xb)*cos(2.*twopi/4.*yb)
            cx(i,1) = vx(i,1,1,1)*dudx(i,1) + vy(i,1,1,1)*dudy(i,1)
            cx(i,1) = vx(i,1,1,1)*dvdx(i,1) + vy(i,1,1,1)*dvdy(i,1)
	      end do
      	call outpost(vxp,vyp,vzp,prp,tp,'   ')
      	call outpost(cx,cy,vzp,prp,tp,'   ')
      end if

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      vis    = param(2)
      one    = 1.0
      twopi  = 8.0*atan(one)
      reyn   = 1.0/vis
      ccc    = 0.25*reyn**2 + twopi*twopi
      rlam   = reyn/2.0 - sqrt( ccc )
      ux     = 1.0  - exp(rlam*x)*cos(twopi*y)
      uy     = rlam * exp(rlam*x)*sin(twopi*y)/twopi
      uz     = 0.0

      temp=0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      vis    = param(2)
      one    = 1.
      twopi  = 8.0*atan(one)
      reyn   = 1.0/vis
      ccc    = 0.25*reyn**2 + twopi*twopi
      rlam   = reyn/2.0 - sqrt( ccc )
      ux     = 1.0  - exp(rlam*x)*cos(twopi*y)
      uy     = rlam * exp(rlam*x)*sin(twopi*y)/twopi
      uz     = 0.0

      temp=0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
