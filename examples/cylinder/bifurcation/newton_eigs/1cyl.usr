c-----------------------------------------------------------------------
      subroutine userchk
      use neklab
      use stdlib_io_npy, only: load_npy
      include "SIZE"
      include "TOTAL"

      ! System for which we seek a fixed point
      type(nek_system) :: sys
		! baseflow (used as initial guess for Newton iteration)
		type(nek_dvector) :: bf
		! initial guess for eigendecomposition
		type(nek_dvector) :: x0
		! exponential propagator
      type(exptA_linop) :: exptA
		! maximum number of krylov vectors for the eigendecomposition
      integer, parameter :: kdim = 128
		! number of eigenpairs to converge
		integer, parameter :: nev = 2
		! 1: constant final tolerances, 2: dynamic tolerances
		integer, parameter :: tol_mode = 1 
		! target tolerance for Newton solver
		real(dp) :: tol
		! misc
		logical :: exist
      
		tol = 1e-6_dp

      if (istep.eq.0) then
         ! load initial guess
         call load_fld('BF.fld')
         call nek2vec(bf, vx, vy, vz, pr, t)
         
         ! define system
         sys = nek_system()
         sys%jacobian = nek_jacobian()
         sys%jacobian%X = bf
			time = 0.0_dp
         call newton_fixed_point_iteration(sys, bf, tol, tol_mode)
			time = -vdiff(1,1,1,1,1)
			call outpost(bf%vx, bf%vy, bf%vz, bf%pr, bf%theta, "BF_")
         
         ! Load eigenvector if present
			inquire(file="EV.fld", exist=exist)
         if (exist) then
            call load_fld("EV.fld")
				call nek2vec(X0, vx, vy, vz, pr, t)
			else
				call x0%rand()
			end if
         ! Load baseflow if present
			inquire(file="nwt1cyl0.f00001", exist=exist)
         if (exist) then
            call load_fld("nwt1cyl0.f00001")
				call nek2vec(bf, vx, vy, vz, pr, t)
			else
				print *, 'Cannot find baseflow file!'
				call nek_end()
			end if
         
         ! Exponential propagator.
			time = 0.0_dp
         exptA = exptA_linop(1.0_dp, bf) ; call exptA%init()
      	call linear_stability_analysis_fixed_point(exptA, kdim, nev, X0=X0)
        
	   	call nek_end()
      end if

      return
      end
c----------------------------------------------------------------------
      subroutine userf (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ffx = 0.0d0
      ffy = 0.0d0
      ffz = 0.0d0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e

      if (JP.eq.0) then         ! velocity
         e  = gllel(ieg)
         ux=1.0d0
         uy=0.0d0
         uz=0.0d0
         temp=0.0d0
      else                      ! perturbation
         ux = 0.0d0
         uy = 0.0d0
         uz = 0.0d0
         temp = 0.0d0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e

      if (JP.eq.0) then         ! velocity
         e  = gllel(ieg)
         ux = 1.0d0
         uy = 0.0d0
         uz = 0.0d0
         temp=0.0d0

      else                      ! perturbation
         ux = 0.0d0
         uy = 0.0d0
         uz = 0.0d0
         temp = 0.0d0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      udiff = 0.0d0
      utrans = 0.0d0
      return
      end
c-----------------------------------------------------------------------
      subroutine userq (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      qvol = 0.0d0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
      integer iel,ifc
      
      !this mesh was generatd with genbox
      !with only BCs for velicity
      !here we chenge outflow to dirichlet if adjoint
      !and initilize BCs for scalar field

      if(uparam(1)==3.2)then !if adjoint, change BCs
      do iel=1,nelt
      do ifc = 1, 2*ndim
        if(cbc(ifc,iel,1).eq.'O  ')cbc(ifc,iel,1)='v  '
      enddo
      enddo
      endif

      if(ifheat)then
      cbc(:,:,2)=cbc(:,:,1)
      do iel=1,nelt
       do ifc = 1, 2*ndim
        if(cbc(ifc,iel,1).eq.'W  ')cbc(ifc,iel,2)='t  '
        if(cbc(ifc,iel,1).eq.'v  ')cbc(ifc,iel,2)='t  '
      enddo
      enddo
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
