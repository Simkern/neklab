c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      udiff =0.0d0
      utrans=0.0d0
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,ieg)
      use neklab
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ffx = 0.0d0
      ffy = 0.0d0
      ffz = 0.0d0
      
      if (jp == 0) call neklab_forcing(ffx,ffy,ffz,ix,iy,iz,ieg,jp)
      
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      qvol = 0.0d0
      source = 0.0d0
      end
c-----------------------------------------------------------------------
      subroutine userchk
      use stdlib_logger, only: debug_level, information_level
      use LightKrylov_Constants
      use LightKrylov_Timing, only: timer => global_lightkrylov_timer
      use LightKrylov_Logger
      use neklab
      use neklab_helix
      use neklab_nek_setup
      implicit none     
      include "SIZE"
      include "TOTAL"
      
      ! System for which we seek a fixed point
      type(nek_system), allocatable :: sys
      ! State vectors
      type(nek_dvector) :: bf
      ! Tolerance for the Newton solver
      real(dp) :: tol, ubar_old, ubar_new, deltaf, df
      ! flow parameters
      !real, parameter :: womersley   = 35.0d0
      real, parameter :: dp0ds       = 7.9486896e-2 !7.945994987500288e-02
      real(dp), dimension(1) :: dpds
      integer :: tol_mode, inwt, log_level
      character(len=128) :: msg
      character(len=3) :: fid
      
      log_level = information_level

      inwt = 0
      if (istep.eq.0) then
         call pipe%setup_summary()
	   ! Set flow parameters
         dpds = [ dp0ds ]
	   call pipe%init_flow(dpds)
         call pipe%compute_bf_forcing(0.0_dp) ! --> set neklab_forcing data
			
	   call load_fld('rsttorus0.f00001')
         call bf%zero()
         call nek2vec(bf, vx, vy, vz, pr, t)

         ! parameters
         tol = 1e-8_dp
         tol_mode = 2
         df = 100*tol
         
         ! define system
         sys = nek_system()
         sys%jacobian = nek_jacobian()
         sys%jacobian%X = bf
         ubar_old = pipe%compute_ubar(bf%vx, bf%vy, bf%vz)
         write(msg,'(A,E15.8)') 'u_bar_old= ', ubar_old
         call nek_log_message(msg, procedure='userchk')
         
         ! Set up logging & timing
         call logger_setup(nio=0, log_level=log_level, log_stdout=.false., log_timestamp=.true.)
         call timer%initialize()
         write(msg,'(A,*(E15.8,1X))') 'forcing= ', dpds
         call nek_log_message(msg, procedure='userchk')
         ! Run Newton
         inwt = inwt + 1
         call newton_fixed_point_iteration(sys, bf, tol, tol_mode)
         call outpost(bf%vx, bf%vy, bf%vz, bf%pr, bf%theta, "BF_")
         ubar_new = pipe%compute_ubar(bf%vx, bf%vy, bf%vz)
         ! Finalize system timings
         call sys%finalize_timer()
         call timer%finalize()
         write(msg,'(A,E15.8)') 'u_bar_new= ', ubar_new
         call nek_log_message(msg, procedure='userchk')
         write(fid,'(I3.3)') inwt
         call rename('lightkrylov.log','lightkrylov_nwt'//fid//'.log')
         
         dpds = [ dp0ds + df ]
         call pipe%init_flow(dpds) !, womersley)
         call pipe%compute_bf_forcing(0.0_dp) ! --> set neklab_forcing data

         ! Set up logging & timing
         call logger_setup(nio=0, log_level=log_level, log_stdout=.false., log_timestamp=.true.)
         call timer%initialize()
         write(msg,'(A,*(E15.8,1X))') 'forcing= ', dpds
         call nek_log_message(msg, procedure='userchk')
         ! Run Newton
         inwt = inwt + 1
         call newton_fixed_point_iteration(sys, bf, tol, tol_mode)
         call outpost(bf%vx, bf%vy, bf%vz, bf%pr, bf%theta, "BF_")
         ubar_new = pipe%compute_ubar(bf%vx, bf%vy, bf%vz)
         ! Finalize system timings
         call sys%finalize_timer()
         call timer%finalize()
         write(msg,'(A,E15.8)') 'u_bar_new= ', ubar_new
         call nek_log_message(msg, procedure='userchk')
         write(fid,'(I3.3)') inwt
         call rename('lightkrylov.log','lightkrylov_nwt'//fid//'.log')

         if (abs(ubar_new - ubar_new) > tol) then
            deltaf = df/(ubar_new - ubar_old)*(1.0_dp - ubar_old)
            if (nid == 0) print *, 'deltaf= ', deltaf
            write(msg,'(A,E15.8)') 'deltaf= ', deltaf
            call nek_log_message(msg, procedure='userchk')

            dpds = [ dp0ds + deltaf ]
            call pipe%init_flow(dpds) !, womersley)
            call pipe%compute_bf_forcing(0.0_dp) ! --> set neklab_forcing data

            ! Set up logging & timing
            write(msg,'(A,*(E15.8,1X))') 'forcing= ', dpds
            call nek_log_message(msg, procedure='userchk')
            call logger_setup(nio=0, log_level=log_level, log_stdout=.false., log_timestamp=.true.)
            call timer%initialize()
            ! Run Newton
            inwt = inwt + 1
            call newton_fixed_point_iteration(sys, bf, tol, tol_mode)
            call outpost(bf%vx, bf%vy, bf%vz, bf%pr, bf%theta, "BF_")
            ubar_new = pipe%compute_ubar(bf%vx, bf%vy, bf%vz)
            ! Finalize system timings
            call sys%finalize_timer()
            call timer%finalize()
            write(msg,'(A,E15.8)') 'u_bar_new= ', ubar_new
            call nek_log_message(msg, procedure='userchk')
            write(fid,'(I3.3)') inwt
            call rename('lightkrylov.log','lightkrylov_nwt'//fid//'.log')
         end if

         lastep = 1
         call vec2nek(vx, vy, vz, pr, t, bf)
         call pipe%save_2d_fields(vx,vy,vz)

         call nek_end()
      end if

      return

      end
c----------------------------------------------------------------------------------
      subroutine userbc(i,j,k,iside,eg)
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer i,j,k,iside,eg
      if (JP.eq.0) then ! velocity
            ux = 1.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         else           ! perturbation
            ux = 0.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         endif
      end
c-----------------------------------------------------------------------
      subroutine useric(i,j,k,eg)
      implicit none 
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer i,j,k,eg
        if (JP.eq.0) then ! velocity
            ux = 1.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         else             ! perturbation
            ux = 0.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         endif
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      implicit none
      include 'SIZE'
      include 'TOTAL'
      call setbc(1,1,'W  ')
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      use stdlib_logger, only: debug_level, information_level
      use neklab_helix
      use LightKrylov_Logger
      implicit none
      include 'SIZE'
      include 'TOTAL'
      ! geometry parameters
      real, parameter :: delta       = 0.3d0
      real, parameter :: diameter    = 2.0d0
      real, parameter :: pitch_s     = 0.0d0
      real, parameter :: length      = 1.0d0
      ! mesh parameters
      integer,  parameter :: nslices = 5
      integer,  parameter :: nelf    = 108
      if (istep.eq.0) then
         ! Setup logger
         call logger_setup(nio=0, log_level=information_level, log_stdout=.false., log_timestamp=.true.)
         ! Initialize type, set geometry and compute forcing distribution
         call helix_pipe(delta, diameter, pitch_s, length, nslices, nelf)
      endif
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      end
c-----------------------------------------------------------------------
