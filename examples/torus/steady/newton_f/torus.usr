c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      udiff =0.0d0
      utrans=0.0d0
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,ieg)
      use neklab
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ffx = 0.0d0
      ffy = 0.0d0
      ffz = 0.0d0
      
      if (jp == 0) call neklab_forcing(ffx,ffy,ffz,ix,iy,iz,ieg,jp)
      
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      qvol = 0.0d0
      source = 0.0d0
      end
c-----------------------------------------------------------------------
      subroutine userchk
      use neklab
      use neklab_helix
      use LightKrylov_Logger
      implicit none     
      include "SIZE"
      include "TOTAL"

      ! System for which we seek a fixed point
      type(nek_system_forced), allocatable :: sys
      ! State vectors
      type(nek_ext_dvector_forcing) :: bf
      type(nek_ext_dvector_forcing) :: ftest, ftest2, residual, increment
      ! Tolerance for the Newton solver
      real(dp) :: tol, mf
      ! flow parameters
      real, parameter :: womersley   = 35.0d0
      real, parameter :: dp0ds       = 7.945994987500288e-02
      real(dp), dimension(n_forcing), parameter :: dpds = [ dp0ds ]
      real(dp), dimension(n_forcing) :: dpds_out
      !complex(dp), dimension(:), allocatable :: dpds_out
      
      if (istep.eq.0) then
          ! Set up logging
          call logger_setup(nio=0, log_stdout=.false., log_timestamp=.true.)
      
          ! Set flow parameters
          call pipe%init_flow(dpds) !, womersley)
          
          call load_fld('BF.fld')

          !call pipe%get_dpds(dpds_out)
          !if (nid == 0) print *, 'init_flow', pipe%nf, dpds_out
          
          call nek2ext_vec_f(bf, vx, vy, vz, pr, t)
          !bf = nek_ext_dvector_forcing(vx, vy, vz, pr, t, real(dpds))
          !if (nid == 0) print *, 'init vec', bf%nf
          !allocate(bf%f(pipe%nf))
          !bf%nf = pipe%nf
          
          call dpds_to_vector(dpds, bf)
          !if (nid == 0) print *, 'init vec', bf%nf, bf%f
          if (nid == 0) print *, 't = ', time, 'forcing: ', pipe%get_forcing(time), param(10)
          
          ! parameters
          tol = 1e-6_dp
          
          ! initialize all vectors
          !call nek2ext_vec_f(ftest,vx,vy,vz,pr,t)
          !allocate(ftest%f(1))
          !ftest%nf = 1
          !ftest%f = pipe%get_forcing(time)
          !call nek2ext_vec_f(residual,vx,vy,vz,pr,t)
          !allocate(residual%f(1))
          !residual%nf = 1
          !residual%f = pipe%get_forcing(time)
          !call nek2ext_vec_f(increment,vx,vy,vz,pr,t)
          !allocate(increment%f(1))
          !increment%nf = 1
          !increment%f = pipe%get_forcing(time)
          
          !if (nid == 0) print *, 't_end = ', param(10)
          !STOP 8
          !print *, ftest%f, ' good-bye'

          ! define system
          sys = nek_system_forced()
          sys%jacobian = nek_jacobian_forced()
          sys%jacobian%X = bf

          !mf = pipe%compute_ubar(vx,vy,vz)
          !if (nid == 0) print *, 'ubar', mf     
          !call sys%response(bf, residual, tol)
          !call ext_vec_f2nek(vx, vy, vz, pr, t, residual)
          !call outpost(vx, vy, vz, pr, t, 'res')
          !call load_fld('restorus0.f00001')
          !call nek2ext_vec_f(residual,vx,vy,vz,pr,t)
          !mf = residual%norm()
          !if (nid == 0) print *, 'norm', mf
          !mf = pipe%compute_ubar(vx,vy,vz)
          !if (nid == 0) print *, 'ubar', mf

          !call residual%chsgn()
          !call increment%zero()

          !if (nid == 0) print *, 'START LINEAR'
          !if (nid == 0) print *, 'residual%f', residual%f
          !call sys%jacobian%matvec(residual, increment)

          call newton_fixed_point_iteration_forcing(sys, bf, tol)
          call outpost(bf%vx, bf%vy, bf%vz, bf%pr, bf%theta, "BF_")

          call nek_end()
      end if

      return

      end
c----------------------------------------------------------------------------------
      subroutine userbc(i,j,k,iside,eg)
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer i,j,k,iside,eg
      if (JP.eq.0) then ! velocity
            ux = 1.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         else           ! perturbation
            ux = 0.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         endif
      end
c-----------------------------------------------------------------------
      subroutine useric(i,j,k,eg)
      implicit none 
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer i,j,k,eg
        if (JP.eq.0) then ! velocity
            ux = 1.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         else             ! perturbation
            ux = 0.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         endif
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      implicit none
      include 'SIZE'
      include 'TOTAL'
      call setbc(1,1,'W  ')
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      use neklab_helix
      implicit none
      include 'SIZE'
      include 'TOTAL'
      ! geometry parameters
      real, parameter :: delta       = 0.3d0
      real, parameter :: diameter    = 2.0d0
      real, parameter :: pitch_s     = 0.0d0
      real, parameter :: length      = 1.0d0
      ! mesh parameters
      integer,  parameter :: nslices = 5
      integer,  parameter :: nelf    = 108
      if (istep.eq.0) then
         ! Initialize type
         call helix_pipe(delta, diameter, pitch_s, length, nslices, nelf)
         ! Set geometry
         call pipe%init_geom()
         ! compute forcing distribution
         call pipe%compute_fshape()
      endif
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      end
c-----------------------------------------------------------------------
