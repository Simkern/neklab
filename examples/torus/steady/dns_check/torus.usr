c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      udiff =0.0d0
      utrans=0.0d0
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,ieg)
      use neklab
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ffx = 0.0d0
      ffy = 0.0d0
      ffz = 0.0d0
      
      if (jp == 0) call neklab_forcing(ffx,ffy,ffz,ix,iy,iz,ieg,jp)
      
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      qvol = 0.0d0
      source = 0.0d0
      end
c-----------------------------------------------------------------------
      subroutine userchk
      use neklab
      use neklab_helix
      use LightKrylov_Logger
      implicit none     
      include "SIZE"
      include "TOTAL"
      
      ! System for which we seek a fixed point
      type(nek_system), allocatable :: sys
      ! State vectors
      type(nek_dvector) :: bf
      ! Tolerance for the Newton solver
      real(dp) :: tol, ubar
      ! flow parameters
      real, parameter :: womersley   = 35.0d0
      real, parameter :: dp0ds       = 7.9486896e-2 !7.945994987500288e-02
      real(dp), dimension(1), parameter :: dpds = [ dp0ds ]
	real(dp), dimension(lx1,ly1,lz1,lelv) :: fx, fy, fz
	integer :: i, ix, iy, ie, iel, ieg
	real(dp) :: xmin, xmax
	real(dp) :: x2d(lx1,ly1,108)
	real(dp) :: y2d(lx1,ly1,108)
      
      if (istep.eq.0) then
         call logger_setup(nio=0, log_level=10, log_stdout=.false., log_timestamp=.true.)

         call pipe%setup_summary()
         ! Set flow parameters
         call pipe%init_flow(dpds)
	      ! Set forcing
	      call pipe%compute_bf_forcing(time)
      end if
      call pipe%get_fshape(fx)
      call pipe%get_angle_s(fy)
      call pipe%get_alpha(fz)
		call outpost(fx, fy, fz, pr, t, 'fsh')
		call get_neklab_forcing(fx, fy, fz, 0)
		call outpost(fx, fy, fz, pr, t, 'fsh')
		! get element owner and element number
		call rzero(vz, lx1*ly1*lz1*lelv)
		iel = 0
		do ie = 1, nelv
			call cfill(vx(1,1,1,ie), nid*1.0_dp, lx1*ly1*lz1)
			call cfill(vy(1,1,1,ie), mod(lglel(ie),108)*1.0_dp,  lx1*ly1*lz1)
			! find elements with one edge on the x axis on the positive side (first slice)
			xmin = minval(abs(xc(:,ie)))
			xmax = maxval(xc(:,ie))
			if (xmin < 1e-6 .and. xmax > 0) then
				iel = iel + 1
				call cfill(vz(1,1,1,ie), nid*1.0_dp, lx1*ly1*lz1)
				do i = 1, 2*ndim
					if (cbc(i,ie,1) .eq. 'P') then
						!print *, 'nid', nid,'iface', i,'cbc: ',cbc(i, ie, 1)
						call ftovec(x2d(1,1,iel), zm1, ie, i, nx1, ny1, nz1) ! z --> x
						call ftovec(y2d(1,1,iel), ym1, ie, i, nx1, ny1, nz1)
					end if
				end do
				do iy = 1, ly1
					do ix = 1, lx1
						vz(ix,iy,1,ie) = 20.0_dp
					end do
				end do
			end if
		end do
      call outpost(vx, vy, vz, pr, t, 'nid')
	call load_fld('rsttorus0.f00001')
	ubar = pipe%compute_ubar(vx,vy,vz)
	if (nid == 0) print *, 'UBAR: ', ubar
	lastep = 1
      call pipe%save_2d_fields(vx,vy,vz)
      call rzero(vx, lx1*ly1*lz1*lelv)
      call pipe%load_2d_fields(1)
      do ie = 1, nelv
            if (pipe%gowner(ie)) then
                  !print *, 'nid:', nid, ' owner of element', ie, ', global:', lglel(ie)
                  !print *, 'nid:', nid, pipe%vx2d(:,:,ie,1)
                  call copy(vx(1,1,1,ie), pipe%vx2d(1,1,ie,1), lx1*ly1)
            end if
      end do
      call outpost(vx, vy, vz, pr, t, 'nt2')
	call nek_end()
      return
      end
c----------------------------------------------------------------------------------
      subroutine userbc(i,j,k,iside,eg)
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer i,j,k,iside,eg
      if (JP.eq.0) then ! velocity
            ux = 1.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         else           ! perturbation
            ux = 0.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         endif
      end
c-----------------------------------------------------------------------
      subroutine useric(i,j,k,eg)
      implicit none 
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer i,j,k,eg
        if (JP.eq.0) then ! velocity
            ux = 1.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         else             ! perturbation
            ux = 0.0d0
            uy = 0.0d0
            uz = 0.0d0
            temp=0.0d0
         endif
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      implicit none
      include 'SIZE'
      include 'TOTAL'
      call setbc(1,1,'W  ')
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      use neklab_helix
      implicit none
      include 'SIZE'
      include 'TOTAL'
      ! geometry parameters
      real, parameter :: delta       = 0.3d0
      real, parameter :: diameter    = 2.0d0
      real, parameter :: pitch_s     = 0.0d0
      real, parameter :: length      = 1.0d0
      ! mesh parameters
      integer,  parameter :: nslices = 5
      integer,  parameter :: nelf    = 108
      if (istep.eq.0) then
         ! Initialize type, set geometry and compute forcing distribution
         call helix_pipe(delta, diameter, pitch_s, length, nslices, nelf)
      endif
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      end
c-----------------------------------------------------------------------
