c-----------------------------------------------------------------------

! Still need to add the forcing implementation from Neklab!

      subroutine userchk
      use neklab
      include "SIZE"
      include "TOTAL"

      ! OTD
      type(nek_otd) :: OTD
      ! OTD opts
      type(otd_opts) :: opts
      ! State vectors
      type(nek_dvector) :: bf
      
      if (istep.eq.0) then
         call load_fld('BF.fld')
         call nek2vec(bf, vx, vy, vz, pr, t)

         ! define OTD structure
         OTD = nek_otd()
         allocate(OTD%baseflow); call OTD%baseflow%zero()
         OTD%baseflow = bf

         opts = otd_opts(startstep = 1, n_usrIC = 0)

         call OTD_analysis(OTD, opts)

         call nek_end()
      end if      

      return
      end
c----------------------------------------------------------------------
      subroutine userf (ix,iy,iz,ieg)
      use neklab, only: neklab_forcing
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ! argument list
      integer ix,iy,iz,ieg
      
      ffx = 0.0d0
      ffy = 0.0d0
      ffz = 0.0d0

      call neklab_forcing(ffx, ffy, ffz, ix, iy, iz, ieg, jp)

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e

      if (JP.eq.0) then         ! velocity
         e  = gllel(ieg)
         ux=1.0d0
         uy=0.0d0
         uz=0.0d0
         temp=0.0d0
      else                      ! perturbation
         ux = 0.0d0
         uy = 0.0d0
         uz = 0.0d0
         temp = 0.0d0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e

      if (JP.eq.0) then         ! velocity
         e  = gllel(ieg)
         ux = 1.0d0
         uy = 0.0d0
         uz = 0.0d0
         temp=0.0d0

      else                      ! perturbation
         ux = 0.0d0
         uy = 0.0d0
         uz = 0.0d0
         temp = 0.0d0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      udiff = 0.0d0
      utrans = 0.0d0
      return
      end
c-----------------------------------------------------------------------
      subroutine userq (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      qvol = 0.0d0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
      integer iel,ifc
      
      !this mesh was generatd with genbox
      !with only BCs for velicity
      !here we chenge outflow to dirichlet if adjoint
      !and initilize BCs for scalar field

      if(uparam(1)==3.2)then !if adjoint, change BCs
      do iel=1,nelt
      do ifc = 1, 2*ndim
        if(cbc(ifc,iel,1).eq.'O  ')cbc(ifc,iel,1)='v  '
      enddo
      enddo
      endif

      if(ifheat)then
      cbc(:,:,2)=cbc(:,:,1)
      do iel=1,nelt
       do ifc = 1, 2*ndim
        if(cbc(ifc,iel,1).eq.'W  ')cbc(ifc,iel,2)='t  '
        if(cbc(ifc,iel,1).eq.'v  ')cbc(ifc,iel,2)='t  '
      enddo
      enddo
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
